type AuthResult {
    success: Boolean
    token: String
}

type CreditsTopUp {
    success: Boolean
    newBalance: Int
    oldBalance: Int
}

type CreditsBalance {
    success: Boolean
    balance: Int
}

type Event {
    id: String
    name: String
    description: String
    start_date: String
    end_date: String
    price: Float
    establishment_id: Int
    maximumCapacity: Int
}

type Establishment {
    id: Int
    name: String
    description: String
    street: String
    city: String
    country: String
    coverImage: String
    profileImage: String
    events: [Event]
}

type Ticket {
    id: String
    event_id: String
    user_id: Int
}

type PurchaseTicketResult {
    success: Boolean
    ticket: Ticket
}

type CreateEstablishmentResult {
    success: Boolean
    establishment: Establishment
}

type UpdateEstablishmentResult {
    success: Boolean
    establishment: Establishment
}

type CreateEventResult {
    success: Boolean
    event: Event
}

type GetEstablishmentsResponse {
    success: Boolean
    establishments: [Establishment]
}

type GetEventsResponse {
    success: Boolean
    events: [Event]
}

type Query {
    #Credits
    getCredit: CreditsBalance

    #Establishment
    getEstablishments: GetEstablishmentsResponse
    getEstablishmentsForUser: GetEstablishmentsResponse
    getEstablishmentById(id: Int!): GetEstablishmentsResponse

    getEvents: GetEventsResponse
}

type Mutation {
    #Auth   
    login(email: String!, password: String!): AuthResult
    register(email: String!, password: String!, username: String!): AuthResult
    googleOAuth(idToken: String!): AuthResult

    #Credits
    topupCredits(amount: Int!): CreditsTopUp

    #Establishment
    createEstablishment(name: String!, description: String!, street: String!, city: String!, country: String!, coverImage: String, profileImage: String): CreateEstablishmentResult
    updateEstablishment(establishment_id: Int!, name: String, description: String, street: String, city: String, country: String, coverImage: String, profileImage: String): UpdateEstablishmentResult
    createEvent(name: String!, description: String!, start_date: String!, end_date: String!, price: Float!, establishment_id: Int!, maximumCapacity: Int!): CreateEventResult
    purchaseTicket(event_id: Int!, user_id: Int!): PurchaseTicketResult
    search(query: String!, type: SearchType!): SearchResultResponse
}

type SearchResultResponse {
    results: [SearchResult]
}

type SearchResult {
    searchType: SearchResultType
    result: SearchResultUnion
}

union SearchResultUnion = Event | Establishment

enum SearchResultType {
    EVENT
    ESTABLISHMENT
}

enum SearchType {
    ALL
    ESTABLISHMENT
    EVENT
}