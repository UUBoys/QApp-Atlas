/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: services/zeus/v1/zeus_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace com.qapp.zeus {
    export class Establishment extends pb_1.Message {
        #one_of_decls: number[][] = [[3], [4]];
        constructor(data?: any[] | ({
            id?: number;
            name?: string;
            street?: string;
            city?: string;
            country?: string;
        } & (({
            description?: string;
        }) | ({
            image?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
                if ("street" in data && data.street != undefined) {
                    this.street = data.street;
                }
                if ("city" in data && data.city != undefined) {
                    this.city = data.city;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get image() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set image(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
        }
        get has_image() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get street() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set street(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get city() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set city(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get _description() {
            const cases: {
                [index: number]: "none" | "description";
            } = {
                0: "none",
                3: "description"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _image() {
            const cases: {
                [index: number]: "none" | "image";
            } = {
                0: "none",
                4: "image"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            description?: string;
            image?: string;
            street?: string;
            city?: string;
            country?: string;
        }): Establishment {
            const message = new Establishment({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.image != null) {
                message.image = data.image;
            }
            if (data.street != null) {
                message.street = data.street;
            }
            if (data.city != null) {
                message.city = data.city;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                description?: string;
                image?: string;
                street?: string;
                city?: string;
                country?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.image != null) {
                data.image = this.image;
            }
            if (this.street != null) {
                data.street = this.street;
            }
            if (this.city != null) {
                data.city = this.city;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_description)
                writer.writeString(3, this.description);
            if (this.has_image)
                writer.writeString(4, this.image);
            if (this.street.length)
                writer.writeString(5, this.street);
            if (this.city.length)
                writer.writeString(6, this.city);
            if (this.country.length)
                writer.writeString(7, this.country);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Establishment {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Establishment();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.image = reader.readString();
                        break;
                    case 5:
                        message.street = reader.readString();
                        break;
                    case 6:
                        message.city = reader.readString();
                        break;
                    case 7:
                        message.country = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Establishment {
            return Establishment.deserialize(bytes);
        }
    }
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[3], [6]];
        constructor(data?: any[] | ({
            id?: string;
            name?: string;
            start_date?: string;
            end_data?: string;
            price?: number;
            establishmentId?: number;
            maximumCapacity?: number;
        } & (({
            description?: string;
        }) | ({
            image?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("start_date" in data && data.start_date != undefined) {
                    this.start_date = data.start_date;
                }
                if ("end_data" in data && data.end_data != undefined) {
                    this.end_data = data.end_data;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("establishmentId" in data && data.establishmentId != undefined) {
                    this.establishmentId = data.establishmentId;
                }
                if ("maximumCapacity" in data && data.maximumCapacity != undefined) {
                    this.maximumCapacity = data.maximumCapacity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get start_date() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set start_date(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get end_data() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set end_data(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get image() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set image(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[1], value);
        }
        get has_image() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get establishmentId() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set establishmentId(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get maximumCapacity() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set maximumCapacity(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get _description() {
            const cases: {
                [index: number]: "none" | "description";
            } = {
                0: "none",
                3: "description"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _image() {
            const cases: {
                [index: number]: "none" | "image";
            } = {
                0: "none",
                6: "image"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            description?: string;
            start_date?: string;
            end_data?: string;
            image?: string;
            price?: number;
            establishmentId?: number;
            maximumCapacity?: number;
        }): Event {
            const message = new Event({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.start_date != null) {
                message.start_date = data.start_date;
            }
            if (data.end_data != null) {
                message.end_data = data.end_data;
            }
            if (data.image != null) {
                message.image = data.image;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.establishmentId != null) {
                message.establishmentId = data.establishmentId;
            }
            if (data.maximumCapacity != null) {
                message.maximumCapacity = data.maximumCapacity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                description?: string;
                start_date?: string;
                end_data?: string;
                image?: string;
                price?: number;
                establishmentId?: number;
                maximumCapacity?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.start_date != null) {
                data.start_date = this.start_date;
            }
            if (this.end_data != null) {
                data.end_data = this.end_data;
            }
            if (this.image != null) {
                data.image = this.image;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.establishmentId != null) {
                data.establishmentId = this.establishmentId;
            }
            if (this.maximumCapacity != null) {
                data.maximumCapacity = this.maximumCapacity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_description)
                writer.writeString(3, this.description);
            if (this.start_date.length)
                writer.writeString(4, this.start_date);
            if (this.end_data.length)
                writer.writeString(5, this.end_data);
            if (this.has_image)
                writer.writeString(6, this.image);
            if (this.price != 0)
                writer.writeFloat(7, this.price);
            if (this.establishmentId != 0)
                writer.writeInt32(8, this.establishmentId);
            if (this.maximumCapacity != 0)
                writer.writeInt32(9, this.maximumCapacity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.start_date = reader.readString();
                        break;
                    case 5:
                        message.end_data = reader.readString();
                        break;
                    case 6:
                        message.image = reader.readString();
                        break;
                    case 7:
                        message.price = reader.readFloat();
                        break;
                    case 8:
                        message.establishmentId = reader.readInt32();
                        break;
                    case 9:
                        message.maximumCapacity = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class Ticket extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            user_id?: number;
            event_id?: string;
            revoked?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("event_id" in data && data.event_id != undefined) {
                    this.event_id = data.event_id;
                }
                if ("revoked" in data && data.revoked != undefined) {
                    this.revoked = data.revoked;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get event_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set event_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get revoked() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set revoked(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            user_id?: number;
            event_id?: string;
            revoked?: boolean;
        }): Ticket {
            const message = new Ticket({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.event_id != null) {
                message.event_id = data.event_id;
            }
            if (data.revoked != null) {
                message.revoked = data.revoked;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                user_id?: number;
                event_id?: string;
                revoked?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.event_id != null) {
                data.event_id = this.event_id;
            }
            if (this.revoked != null) {
                data.revoked = this.revoked;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.user_id != 0)
                writer.writeInt32(2, this.user_id);
            if (this.event_id.length)
                writer.writeString(3, this.event_id);
            if (this.revoked != false)
                writer.writeBool(4, this.revoked);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ticket {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ticket();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.user_id = reader.readInt32();
                        break;
                    case 3:
                        message.event_id = reader.readString();
                        break;
                    case 4:
                        message.revoked = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Ticket {
            return Ticket.deserialize(bytes);
        }
    }
    export class GetEstablishmentsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetEstablishmentsRequest {
            const message = new GetEstablishmentsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEstablishmentsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEstablishmentsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEstablishmentsRequest {
            return GetEstablishmentsRequest.deserialize(bytes);
        }
    }
    export class GetEventsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetEventsRequest {
            const message = new GetEventsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEventsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEventsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEventsRequest {
            return GetEventsRequest.deserialize(bytes);
        }
    }
    export class GetEstablishmentsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            establishments?: Establishment[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("establishments" in data && data.establishments != undefined) {
                    this.establishments = data.establishments;
                }
            }
        }
        get establishments() {
            return pb_1.Message.getRepeatedWrapperField(this, Establishment, 1) as Establishment[];
        }
        set establishments(value: Establishment[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            establishments?: ReturnType<typeof Establishment.prototype.toObject>[];
        }): GetEstablishmentsResponse {
            const message = new GetEstablishmentsResponse({});
            if (data.establishments != null) {
                message.establishments = data.establishments.map(item => Establishment.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                establishments?: ReturnType<typeof Establishment.prototype.toObject>[];
            } = {};
            if (this.establishments != null) {
                data.establishments = this.establishments.map((item: Establishment) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.establishments.length)
                writer.writeRepeatedMessage(1, this.establishments, (item: Establishment) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEstablishmentsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEstablishmentsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.establishments, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Establishment.deserialize(reader), Establishment));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEstablishmentsResponse {
            return GetEstablishmentsResponse.deserialize(bytes);
        }
    }
    export class CreateEstablishmentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3]];
        constructor(data?: any[] | ({
            name?: string;
            street?: string;
            city?: string;
            country?: string;
            ownerId?: number;
        } & (({
            description?: string;
        }) | ({
            image?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
                if ("street" in data && data.street != undefined) {
                    this.street = data.street;
                }
                if ("city" in data && data.city != undefined) {
                    this.city = data.city;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("ownerId" in data && data.ownerId != undefined) {
                    this.ownerId = data.ownerId;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get image() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set image(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_image() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get street() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set street(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get city() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set city(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get ownerId() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set ownerId(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get _description() {
            const cases: {
                [index: number]: "none" | "description";
            } = {
                0: "none",
                2: "description"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _image() {
            const cases: {
                [index: number]: "none" | "image";
            } = {
                0: "none",
                3: "image"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            image?: string;
            street?: string;
            city?: string;
            country?: string;
            ownerId?: number;
        }): CreateEstablishmentRequest {
            const message = new CreateEstablishmentRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.image != null) {
                message.image = data.image;
            }
            if (data.street != null) {
                message.street = data.street;
            }
            if (data.city != null) {
                message.city = data.city;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.ownerId != null) {
                message.ownerId = data.ownerId;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                image?: string;
                street?: string;
                city?: string;
                country?: string;
                ownerId?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.image != null) {
                data.image = this.image;
            }
            if (this.street != null) {
                data.street = this.street;
            }
            if (this.city != null) {
                data.city = this.city;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.ownerId != null) {
                data.ownerId = this.ownerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_description)
                writer.writeString(2, this.description);
            if (this.has_image)
                writer.writeString(3, this.image);
            if (this.street.length)
                writer.writeString(4, this.street);
            if (this.city.length)
                writer.writeString(5, this.city);
            if (this.country.length)
                writer.writeString(6, this.country);
            if (this.ownerId != 0)
                writer.writeInt32(7, this.ownerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEstablishmentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEstablishmentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.image = reader.readString();
                        break;
                    case 4:
                        message.street = reader.readString();
                        break;
                    case 5:
                        message.city = reader.readString();
                        break;
                    case 6:
                        message.country = reader.readString();
                        break;
                    case 7:
                        message.ownerId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEstablishmentRequest {
            return CreateEstablishmentRequest.deserialize(bytes);
        }
    }
    export class SetEstablishmentRoleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            establishmentId?: string;
            userId?: number;
            role?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("establishmentId" in data && data.establishmentId != undefined) {
                    this.establishmentId = data.establishmentId;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
            }
        }
        get establishmentId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set establishmentId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            establishmentId?: string;
            userId?: number;
            role?: string;
        }): SetEstablishmentRoleRequest {
            const message = new SetEstablishmentRoleRequest({});
            if (data.establishmentId != null) {
                message.establishmentId = data.establishmentId;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            return message;
        }
        toObject() {
            const data: {
                establishmentId?: string;
                userId?: number;
                role?: string;
            } = {};
            if (this.establishmentId != null) {
                data.establishmentId = this.establishmentId;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.establishmentId.length)
                writer.writeString(1, this.establishmentId);
            if (this.userId != 0)
                writer.writeInt32(2, this.userId);
            if (this.role.length)
                writer.writeString(3, this.role);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetEstablishmentRoleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetEstablishmentRoleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.establishmentId = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readInt32();
                        break;
                    case 3:
                        message.role = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetEstablishmentRoleRequest {
            return SetEstablishmentRoleRequest.deserialize(bytes);
        }
    }
    export class GetEventsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            events?: Event[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, Event, 1) as Event[];
        }
        set events(value: Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            events?: ReturnType<typeof Event.prototype.toObject>[];
        }): GetEventsResponse {
            const message = new GetEventsResponse({});
            if (data.events != null) {
                message.events = data.events.map(item => Event.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                events?: ReturnType<typeof Event.prototype.toObject>[];
            } = {};
            if (this.events != null) {
                data.events = this.events.map((item: Event) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.events.length)
                writer.writeRepeatedMessage(1, this.events, (item: Event) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEventsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEventsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Event.deserialize(reader), Event));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEventsResponse {
            return GetEventsResponse.deserialize(bytes);
        }
    }
    export class CreateEventRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [5]];
        constructor(data?: any[] | ({
            name?: string;
            start_date?: string;
            end_data?: string;
            price?: number;
            establishmentId?: number;
            maximumCapacity?: number;
        } & (({
            description?: string;
        }) | ({
            image?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("start_date" in data && data.start_date != undefined) {
                    this.start_date = data.start_date;
                }
                if ("end_data" in data && data.end_data != undefined) {
                    this.end_data = data.end_data;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("establishmentId" in data && data.establishmentId != undefined) {
                    this.establishmentId = data.establishmentId;
                }
                if ("maximumCapacity" in data && data.maximumCapacity != undefined) {
                    this.maximumCapacity = data.maximumCapacity;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get start_date() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set start_date(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get end_data() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set end_data(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get image() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set image(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[1], value);
        }
        get has_image() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get establishmentId() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set establishmentId(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get maximumCapacity() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set maximumCapacity(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get _description() {
            const cases: {
                [index: number]: "none" | "description";
            } = {
                0: "none",
                2: "description"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _image() {
            const cases: {
                [index: number]: "none" | "image";
            } = {
                0: "none",
                5: "image"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            start_date?: string;
            end_data?: string;
            image?: string;
            price?: number;
            establishmentId?: number;
            maximumCapacity?: number;
        }): CreateEventRequest {
            const message = new CreateEventRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.start_date != null) {
                message.start_date = data.start_date;
            }
            if (data.end_data != null) {
                message.end_data = data.end_data;
            }
            if (data.image != null) {
                message.image = data.image;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.establishmentId != null) {
                message.establishmentId = data.establishmentId;
            }
            if (data.maximumCapacity != null) {
                message.maximumCapacity = data.maximumCapacity;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                start_date?: string;
                end_data?: string;
                image?: string;
                price?: number;
                establishmentId?: number;
                maximumCapacity?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.start_date != null) {
                data.start_date = this.start_date;
            }
            if (this.end_data != null) {
                data.end_data = this.end_data;
            }
            if (this.image != null) {
                data.image = this.image;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.establishmentId != null) {
                data.establishmentId = this.establishmentId;
            }
            if (this.maximumCapacity != null) {
                data.maximumCapacity = this.maximumCapacity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_description)
                writer.writeString(2, this.description);
            if (this.start_date.length)
                writer.writeString(3, this.start_date);
            if (this.end_data.length)
                writer.writeString(4, this.end_data);
            if (this.has_image)
                writer.writeString(5, this.image);
            if (this.price != 0)
                writer.writeFloat(6, this.price);
            if (this.establishmentId != 0)
                writer.writeInt32(7, this.establishmentId);
            if (this.maximumCapacity != 0)
                writer.writeInt32(8, this.maximumCapacity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEventRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEventRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.start_date = reader.readString();
                        break;
                    case 4:
                        message.end_data = reader.readString();
                        break;
                    case 5:
                        message.image = reader.readString();
                        break;
                    case 6:
                        message.price = reader.readFloat();
                        break;
                    case 7:
                        message.establishmentId = reader.readInt32();
                        break;
                    case 8:
                        message.maximumCapacity = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEventRequest {
            return CreateEventRequest.deserialize(bytes);
        }
    }
    export class PurchaseTicketRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            eventId?: number;
            userId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("eventId" in data && data.eventId != undefined) {
                    this.eventId = data.eventId;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get eventId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set eventId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            eventId?: number;
            userId?: number;
        }): PurchaseTicketRequest {
            const message = new PurchaseTicketRequest({});
            if (data.eventId != null) {
                message.eventId = data.eventId;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                eventId?: number;
                userId?: number;
            } = {};
            if (this.eventId != null) {
                data.eventId = this.eventId;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.eventId != 0)
                writer.writeInt32(1, this.eventId);
            if (this.userId != 0)
                writer.writeInt32(2, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PurchaseTicketRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PurchaseTicketRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.eventId = reader.readInt32();
                        break;
                    case 2:
                        message.userId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PurchaseTicketRequest {
            return PurchaseTicketRequest.deserialize(bytes);
        }
    }
    export class RefundTicketRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uuid?: string;
            userId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uuid" in data && data.uuid != undefined) {
                    this.uuid = data.uuid;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            uuid?: string;
            userId?: number;
        }): RefundTicketRequest {
            const message = new RefundTicketRequest({});
            if (data.uuid != null) {
                message.uuid = data.uuid;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                uuid?: string;
                userId?: number;
            } = {};
            if (this.uuid != null) {
                data.uuid = this.uuid;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uuid.length)
                writer.writeString(1, this.uuid);
            if (this.userId != 0)
                writer.writeInt32(2, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefundTicketRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefundTicketRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uuid = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefundTicketRequest {
            return RefundTicketRequest.deserialize(bytes);
        }
    }
    export class RefundTicketResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uuid?: string;
            userId?: number;
            revoked?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uuid" in data && data.uuid != undefined) {
                    this.uuid = data.uuid;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("revoked" in data && data.revoked != undefined) {
                    this.revoked = data.revoked;
                }
            }
        }
        get uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get revoked() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set revoked(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            uuid?: string;
            userId?: number;
            revoked?: boolean;
        }): RefundTicketResponse {
            const message = new RefundTicketResponse({});
            if (data.uuid != null) {
                message.uuid = data.uuid;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.revoked != null) {
                message.revoked = data.revoked;
            }
            return message;
        }
        toObject() {
            const data: {
                uuid?: string;
                userId?: number;
                revoked?: boolean;
            } = {};
            if (this.uuid != null) {
                data.uuid = this.uuid;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.revoked != null) {
                data.revoked = this.revoked;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uuid.length)
                writer.writeString(1, this.uuid);
            if (this.userId != 0)
                writer.writeInt32(2, this.userId);
            if (this.revoked != false)
                writer.writeBool(3, this.revoked);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefundTicketResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefundTicketResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uuid = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readInt32();
                        break;
                    case 3:
                        message.revoked = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefundTicketResponse {
            return RefundTicketResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedZeusService {
        static definition = {
            GetEstablishments: {
                path: "/com.qapp.zeus.Zeus/GetEstablishments",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetEstablishmentsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetEstablishmentsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetEstablishmentsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetEstablishmentsResponse.deserialize(new Uint8Array(bytes))
            },
            GetEvents: {
                path: "/com.qapp.zeus.Zeus/GetEvents",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetEventsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetEventsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetEventsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetEventsResponse.deserialize(new Uint8Array(bytes))
            },
            CreateEstablishment: {
                path: "/com.qapp.zeus.Zeus/CreateEstablishment",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateEstablishmentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateEstablishmentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Establishment) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Establishment.deserialize(new Uint8Array(bytes))
            },
            CreateEvent: {
                path: "/com.qapp.zeus.Zeus/CreateEvent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateEventRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateEventRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Event) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Event.deserialize(new Uint8Array(bytes))
            },
            PurchaseTicket: {
                path: "/com.qapp.zeus.Zeus/PurchaseTicket",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PurchaseTicketRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PurchaseTicketRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Ticket) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Ticket.deserialize(new Uint8Array(bytes))
            },
            RefundTicket: {
                path: "/com.qapp.zeus.Zeus/RefundTicket",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RefundTicketRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RefundTicketRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RefundTicketResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RefundTicketResponse.deserialize(new Uint8Array(bytes))
            },
            SetEstablishmentRole: {
                path: "/com.qapp.zeus.Zeus/SetEstablishmentRole",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetEstablishmentRoleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetEstablishmentRoleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SetEstablishmentRoleRequest) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SetEstablishmentRoleRequest.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetEstablishments(call: grpc_1.ServerUnaryCall<GetEstablishmentsRequest, GetEstablishmentsResponse>, callback: grpc_1.sendUnaryData<GetEstablishmentsResponse>): void;
        abstract GetEvents(call: grpc_1.ServerUnaryCall<GetEventsRequest, GetEventsResponse>, callback: grpc_1.sendUnaryData<GetEventsResponse>): void;
        abstract CreateEstablishment(call: grpc_1.ServerUnaryCall<CreateEstablishmentRequest, Establishment>, callback: grpc_1.sendUnaryData<Establishment>): void;
        abstract CreateEvent(call: grpc_1.ServerUnaryCall<CreateEventRequest, Event>, callback: grpc_1.sendUnaryData<Event>): void;
        abstract PurchaseTicket(call: grpc_1.ServerUnaryCall<PurchaseTicketRequest, Ticket>, callback: grpc_1.sendUnaryData<Ticket>): void;
        abstract RefundTicket(call: grpc_1.ServerUnaryCall<RefundTicketRequest, RefundTicketResponse>, callback: grpc_1.sendUnaryData<RefundTicketResponse>): void;
        abstract SetEstablishmentRole(call: grpc_1.ServerUnaryCall<SetEstablishmentRoleRequest, SetEstablishmentRoleRequest>, callback: grpc_1.sendUnaryData<SetEstablishmentRoleRequest>): void;
    }
    export class ZeusClient extends grpc_1.makeGenericClientConstructor(UnimplementedZeusService.definition, "Zeus", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetEstablishments: GrpcUnaryServiceInterface<GetEstablishmentsRequest, GetEstablishmentsResponse> = (message: GetEstablishmentsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetEstablishmentsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetEstablishmentsResponse>, callback?: grpc_1.requestCallback<GetEstablishmentsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetEstablishments(message, metadata, options, callback);
        };
        GetEvents: GrpcUnaryServiceInterface<GetEventsRequest, GetEventsResponse> = (message: GetEventsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetEventsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetEventsResponse>, callback?: grpc_1.requestCallback<GetEventsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetEvents(message, metadata, options, callback);
        };
        CreateEstablishment: GrpcUnaryServiceInterface<CreateEstablishmentRequest, Establishment> = (message: CreateEstablishmentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Establishment>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Establishment>, callback?: grpc_1.requestCallback<Establishment>): grpc_1.ClientUnaryCall => {
            return super.CreateEstablishment(message, metadata, options, callback);
        };
        CreateEvent: GrpcUnaryServiceInterface<CreateEventRequest, Event> = (message: CreateEventRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Event>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Event>, callback?: grpc_1.requestCallback<Event>): grpc_1.ClientUnaryCall => {
            return super.CreateEvent(message, metadata, options, callback);
        };
        PurchaseTicket: GrpcUnaryServiceInterface<PurchaseTicketRequest, Ticket> = (message: PurchaseTicketRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Ticket>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Ticket>, callback?: grpc_1.requestCallback<Ticket>): grpc_1.ClientUnaryCall => {
            return super.PurchaseTicket(message, metadata, options, callback);
        };
        RefundTicket: GrpcUnaryServiceInterface<RefundTicketRequest, RefundTicketResponse> = (message: RefundTicketRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RefundTicketResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RefundTicketResponse>, callback?: grpc_1.requestCallback<RefundTicketResponse>): grpc_1.ClientUnaryCall => {
            return super.RefundTicket(message, metadata, options, callback);
        };
        SetEstablishmentRole: GrpcUnaryServiceInterface<SetEstablishmentRoleRequest, SetEstablishmentRoleRequest> = (message: SetEstablishmentRoleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SetEstablishmentRoleRequest>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SetEstablishmentRoleRequest>, callback?: grpc_1.requestCallback<SetEstablishmentRoleRequest>): grpc_1.ClientUnaryCall => {
            return super.SetEstablishmentRole(message, metadata, options, callback);
        };
    }
}
